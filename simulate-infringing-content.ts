
import { db } from './server/db.js';
import { infringingContents, users } from './shared/schema.js';
import { eq } from 'drizzle-orm';

async function simulateInfringingContent() {
  console.log('üöÄ T·∫°o d·ªØ li·ªáu m·∫´u cho n·ªôi dung vi ph·∫°m...');

  try {
    // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
    const activeUsers = await db
      .select()
      .from(users)
      .where(eq(users.status, "active"));

    if (activeUsers.length === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng active");
    }

    console.log(`üìù T√¨m th·∫•y ${activeUsers.length} ng∆∞·ªùi d√πng active`);

    // D·ªØ li·ªáu m·∫´u cho n·ªôi dung vi ph·∫°m
    const sampleData = [
      {
        externalId: "114629837455014358",
        violation_description: "N·ªôi dung ch·ª©a ng√¥n t·ª´ ƒë·ªôc h·∫°i v√† k√≠ch ƒë·ªông b·∫°o l·ª±c",
        status: "pending"
      },
      {
        externalId: "114630047869243404",
        violation_description: "ƒêƒÉng t·∫£i h√¨nh ·∫£nh kh√¥ng ph√π h·ª£p v·ªõi ti√™u chu·∫©n c·ªông ƒë·ªìng",
        status: "processing"
      },
      {
        externalId: "114631258147395627",
        violation_description: "Spam v√† qu·∫£ng c√°o tr√°i ph√©p",
        status: "completed"
      },
      {
        externalId: "114632469258741036",
        violation_description: "Chia s·∫ª th√¥ng tin sai l·ªách v√† tin gi·∫£",
        status: "pending"
      },
      {
        externalId: "114633680369852147",
        violation_description: "X√¢m ph·∫°m b·∫£n quy·ªÅn n·ªôi dung",
        status: "processing"
      },
      {
        externalId: "114634891470963258",
        violation_description: "N·ªôi dung khi√™u d√¢m v√† kh√¥ng ph√π h·ª£p",
        status: "completed"
      },
      {
        externalId: "114636102581074369",
        violation_description: "ƒêe d·ªça v√† qu·∫•y r·ªëi ng∆∞·ªùi d√πng kh√°c",
        status: "pending"
      },
      {
        externalId: "114637313692185470",
        violation_description: "ƒêƒÉng t·∫£i n·ªôi dung vi ph·∫°m ph√°p lu·∫≠t",
        status: "processing"
      }
    ];

    // Ph√¢n c√¥ng theo round-robin
    let userIndex = 0;
    const currentDate = new Date();

    for (const [index, item] of sampleData.entries()) {
      const assignedUser = activeUsers[userIndex];
      
      const insertData = {
        externalId: item.externalId,
        assigned_to_id: assignedUser.id,
        violation_description: item.violation_description,
        status: item.status,
        processing_time: item.status === "completed" ? 
          new Date(currentDate.getTime() - Math.random() * 7 * 24 * 60 * 60 * 1000) : // Random trong 7 ng√†y qua
          null,
        created_at: new Date(currentDate.getTime() - (index + 1) * 24 * 60 * 60 * 1000), // M·ªói ng√†y m·ªôt record
        updated_at: new Date()
      };

      try {
        const result = await db
          .insert(infringingContents)
          .values(insertData)
          .returning();

        console.log(`‚úÖ T·∫°o th√†nh c√¥ng n·ªôi dung vi ph·∫°m ${result[0].id} - ${item.externalId}`);
        console.log(`üë§ Ph√¢n c√¥ng cho: ${assignedUser.name} (${assignedUser.username})`);
        console.log(`üìã Tr·∫°ng th√°i: ${item.status}`);
        console.log(`üìù M√¥ t·∫£: ${item.violation_description}`);
        console.log('---');
      } catch (error) {
        console.error(`‚ùå L·ªói t·∫°o n·ªôi dung vi ph·∫°m ${item.externalId}:`, error);
      }

      // Chuy·ªÉn sang ng∆∞·ªùi d√πng ti·∫øp theo (round-robin)
      userIndex = (userIndex + 1) % activeUsers.length;
    }

    console.log('üéâ Ho√†n t·∫•t t·∫°o d·ªØ li·ªáu m·∫´u cho n·ªôi dung vi ph·∫°m!');

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu m·∫´u:', error);
    throw error;
  }
}

// Ch·∫°y script
simulateInfringingContent()
  .then(() => {
    console.log('‚úÖ Script ho√†n t·∫•t th√†nh c√¥ng');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });
