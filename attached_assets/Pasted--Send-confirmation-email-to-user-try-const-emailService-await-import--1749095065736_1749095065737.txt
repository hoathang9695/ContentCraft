      // Send confirmation email to user
      try {
        const { emailService } = await import('./email.js');
        const confirmationSubject = "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒê√≥ng g√≥p √Ω ki·∫øn & B√°o l·ªói - EMSO";
        const confirmationContent = `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
              <h2 style="color: #333; margin: 0 0 10px 0;">C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒê√≥ng g√≥p √Ω ki·∫øn & B√°o l·ªói</h2>
              <p style="margin: 0; color: #666;">Xin ch√†o ${message.full_name},</p>
            </div>

            <div style="background-color: #fff; padding: 20px; border: 1px solid #e9ecef; border-radius: 8px; margin-bottom: 20px;">
              <div style="background-color: #e8f5e8; padding: 15px; border-radius: 6px; border-left: 4px solid #28a745; margin-bottom: 15px;">
                <p style="margin: 0; color: #155724; font-weight: 500;">
                  C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒê√≥ng g√≥p √Ω ki·∫øn & B√°o l·ªói. Ch√∫ng t√¥i v√¥ c√πng tr√¢n tr·ªçng nh·ªØng ƒë√≥ng g√≥p qu√Ω b√°u c·ªßa b·∫°n. 
                  Ch√∫ng t√¥i s·∫Ω s·ªõm ph·∫£n h·ªìi v·ªÅ ƒê√≥ng g√≥p c·ªßa b·∫°n qua email b·∫°n ƒë√£ ƒëƒÉng k√Ω nh√©.
                </p>
              </div>
              
              <div style="background-color: #f8f9fa; padding: 15px; border-radius: 6px;">
                <h4 style="color: #495057; margin: 0 0 10px 0;">Th√¥ng tin ƒë√≥ng g√≥p c·ªßa b·∫°n:</h4>
                <p style="margin: 5px 0; color: #6c757d;"><strong>Ch·ªß ƒë·ªÅ:</strong> ${message.subject}</p>
                <p style="margin: 5px 0; color: #6c757d;"><strong>Lo·∫°i ƒë√≥ng g√≥p:</strong> ${
                  message.feedback_type === 'bug_report' ? 'B√°o l·ªói' :
                  message.feedback_type === 'feature_request' ? 'Y√™u c·∫ßu t√≠nh nƒÉng' :
                  message.feedback_type === 'complaint' ? 'Khi·∫øu n·∫°i' :
                  message.feedback_type === 'suggestion' ? 'ƒê·ªÅ xu·∫•t' :
                  message.feedback_type === 'other' ? 'Kh√°c' : 'Ch∆∞a ph√¢n lo·∫°i'
                }</p>
                <p style="margin: 5px 0; color: #6c757d;"><strong>M√£ y√™u c·∫ßu:</strong> #${newRequest[0].id}</p>
              </div>

              <div style="margin-top: 20px; padding: 15px; background-color: #e3f2fd; border-radius: 6px; border-left: 4px solid #2196f3;">
                <p style="margin: 0; color: #0d47a1; font-weight: 500;">
                  H√£y c√πng ch√∫ng t√¥i chung tay x√¢y d·ª±ng M·∫°ng x√£ h·ªôi v√¨ ng∆∞·ªùi Vi·ªát.
                </p>
                <p style="margin: 10px 0 0 0; color: #0d47a1; font-weight: 600;">
                  Tr√¢n tr·ªçng c·∫£m ∆°n!
                </p>
              </div>
            </div>

            <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #888;">
              <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ EMSO - M·∫°ng x√£ h·ªôi v√¨ ng∆∞·ªùi Vi·ªát.</p>
              <p>N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
              <p style="margin-top: 15px;">
                <a href="https://emso.vn/about_us/mission" style="color: #3B82F6; text-decoration: none; margin-right: 10px;">V·ªÅ ch√∫ng t√¥i</a>
                <a href="https://policies.emso.vn/community-standards" style="color: #3B82F6; text-decoration: none; margin-right: 10px;">Ti√™u chu·∫©n c·ªông ƒë·ªìng</a>
                <a href="https://policies.emso.vn/money-making-policy" style="color: #3B82F6; text-decoration: none; margin-right: 10px;">Ch√≠nh s√°ch ki·∫øm ti·ªÅn</a>
                <a href="https://policies.emso.vn/ipr" style="color: #3B82F6; text-decoration: none; margin-right: 10px;">Ch√≠nh s√°ch n·ªôi dung</a>
                <a href="https://policies.emso.vn/advertising-marketing" style="color: #3B82F6; text-decoration: none;">Ch√≠nh s√°ch qu·∫£ng c√°o</a>
              </p>
            </div>
          </div>
        `;

        const emailSent = await emailService.sendEmail(
          message.email,
          confirmationSubject,
          confirmationContent
        );

        if (emailSent) {
          log(`üì® Confirmation email sent successfully to ${message.email} for feedback #${newRequest[0].id}`, "kafka");
        } else {
          log(`‚ö†Ô∏è Failed to send confirmation email to ${message.email} for feedback #${newRequest[0].id}`, "kafka-error");
        }
      } catch (emailError) {
        log(`‚ùå Error sending confirmation email: ${emailError}`, "kafka-error");
        // Don't throw error - we don't want to fail the feedback processing if email fails
      }
