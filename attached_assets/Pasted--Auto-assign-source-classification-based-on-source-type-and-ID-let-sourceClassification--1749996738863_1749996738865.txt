    // Auto-assign source classification based on source type and ID
      let sourceClassification = "new"; // default value

      try {
        if (contentMessage.source?.type && contentMessage.source?.id) {
          if (contentMessage.source.type.toLowerCase() === 'account') {
            // Check real_users table
            const userResult = await tx
              .select({ classification: realUsers.classification })
              .from(realUsers)
              .where(sql`full_name::json->>'id' = ${contentMessage.source.id.toString()}`)
              .limit(1);

            if (userResult.length > 0 && userResult[0].classification) {
              sourceClassification = userResult[0].classification;
            }
          } else if (contentMessage.source.type.toLowerCase() === 'page') {
            // Check pages table
            const pageResult = await tx
              .select({ classification: pages.classification })
              .from(pages)
              .where(sql`page_name::json->>'id' = ${contentMessage.source.id.toString()}`)
              .limit(1);

            if (pageResult.length > 0 && pageResult[0].classification) {
              sourceClassification = pageResult[0].classification;
            }
          } else if (contentMessage.source.type.toLowerCase() === 'group') {
            // Check groups table
            const groupResult = await tx
              .select({ classification: groups.classification })
              .from(groups)
              .where(sql`group_name::json->>'id' = ${contentMessage.source.id.toString()}`)
              .limit(1);

            if (groupResult.length > 0 && groupResult[0].classification) {
              sourceClassification = groupResult[0].classification;
            }
          }
        }
      } catch (error) {
        console.error("Error getting source classification:", error);
        // Keep default "new" value
      }

      console.log(`üìù Creating content with source_classification: ${sourceClassification} for source: ${contentMessage.source?.type} - ${contentMessage.source?.id}`);

    const insertData = {
      externalId: contentMessage.externalId,
      source: contentMessage.source || null,