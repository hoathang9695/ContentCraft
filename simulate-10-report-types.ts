import { db } from './server/db';
import { users, reportManagement } from './shared/schema';
import { eq, ne, and } from 'drizzle-orm';

interface ReportMessage {
  reportId: string;
  reportType: 'user' | 'page' | 'group' | 'content' | 'comment' | 'course' | 'project' | 'recruitment' | 'song' | 'event';
  reporterName: string;
  reporterEmail: string;
  reason: string;
  detailedReason: string;
  reportedTargetId: string;
}

async function processReportMessage(message: ReportMessage) {
  console.log(`üîÑ Processing report message: ${JSON.stringify(message)}`);

  try {
    // Get active users for round-robin assignment
    const activeUsers = await db
      .select()
      .from(users)
      .where(and(eq(users.status, "active"), ne(users.role, "admin")));

    if (!activeUsers || activeUsers.length === 0) {
      throw new Error("No active non-admin users found for assignment");
    }

    console.log(`üë• Found ${activeUsers.length} active users for assignment`);

    // Get last assigned report for round-robin
    const lastAssignedReport = await db.query.reportManagement.findFirst({
      orderBy: (reportManagement, { desc }) => [desc(reportManagement.createdAt)]
    });

    // Calculate next assignee index
    let nextAssigneeIndex = 0;
    if (lastAssignedReport && lastAssignedReport.assignedToId) {
      const lastAssigneeIndex = activeUsers.findIndex(
        user => user.id === lastAssignedReport.assignedToId
      );
      if (lastAssigneeIndex !== -1) {
        nextAssigneeIndex = (lastAssigneeIndex + 1) % activeUsers.length;
      }
    }

    const assignedUser = activeUsers[nextAssigneeIndex];
    console.log(`üë§ Assigned to user: ${assignedUser.name} (ID: ${assignedUser.id})`);

    // Insert into report_management table
    const insertData = {
      reportedId: {
        id: message.reportedTargetId
      },
      reportType: message.reportType,
      reporterName: {
        id: `reporter_${Date.now()}`,
        name: message.reporterName
      },
      reporterEmail: message.reporterEmail,
      reason: message.reason,
      detailedReason: message.detailedReason,
      status: 'pending' as const,
      assignedToId: assignedUser.id,
      assignedToName: assignedUser.name,
      assignedAt: new Date()
    };

    const insertedReport = await db
      .insert(reportManagement)
      .values(insertData)
      .returning();

    console.log(`‚úÖ Report inserted into database:`, insertedReport[0]);
    return insertedReport[0];

  } catch (error) {
    console.error(`‚ùå Error processing report message: ${error}`);
    throw error;
  }
}

async function simulate10ReportTypes() {
  console.log('üöÄ Starting comprehensive Report Management simulation with 10 types...\n');

  try {
    // Clean existing reports for fresh test
    console.log('üßπ Cleaning existing reports...');
    await db.delete(reportManagement);
    console.log('‚úÖ Existing reports cleaned\n');

    // Create 10 different types of reports with varied content
    const testMessages: ReportMessage[] = [
      // 1. User Report - Spam
      {
        reportId: '1001',
        reportType: 'user',
        reporterName: 'Nguy·ªÖn VƒÉn An',
        reporterEmail: 'an.nguyen@example.com',
        reason: 'Spam tin nh·∫Øn',
        detailedReason: 'Ng∆∞·ªùi d√πng n√†y li√™n t·ª•c g·ª≠i tin nh·∫Øn spam qu·∫£ng c√°o ƒë·∫øn nhi·ªÅu ng∆∞·ªùi d√πng kh√°c.',
        reportedTargetId: '114652263781752445'
      },

      // 2. Page Report - Copyright
      {
        reportId: '1002',
        reportType: 'page',
        reporterName: 'Tr·∫ßn Th·ªã B√¨nh',
        reporterEmail: 'binh.tran@example.com',
        reason: 'Vi ph·∫°m b·∫£n quy·ªÅn',
        detailedReason: 'Trang n√†y ƒëƒÉng t·∫£i nhi·ªÅu h√¨nh ·∫£nh c√≥ b·∫£n quy·ªÅn m√† kh√¥ng c√≥ s·ª± cho ph√©p.',
        reportedTargetId: 'PAGE_123456789'
      },

      // 3. Group Report - Harmful Content
      {
        reportId: '1003',
        reportType: 'group',
        reporterName: 'L√™ Minh C∆∞·ªùng',
        reporterEmail: 'cuong.le@example.com',
        reason: 'N·ªôi dung ƒë·ªôc h·∫°i',
        detailedReason: 'Nh√≥m n√†y chia s·∫ª c√°c n·ªôi dung c√≥ t√≠nh ch·∫•t b·∫°o l·ª±c v√† k√≠ch ƒë·ªông th√π ƒë·ªãch.',
        reportedTargetId: 'GROUP_987654321'
      },

      // 4. Content Report - Financial Scam
      {
        reportId: '1004',
        reportType: 'content',
        reporterName: 'Ph·∫°m Th·ªã Dung',
        reporterEmail: 'dung.pham@example.com',
        reason: 'L·ª´a ƒë·∫£o t√†i ch√≠nh',
        detailedReason: 'B√†i ƒëƒÉng n√†y qu·∫£ng c√°o c√°c ch∆∞∆°ng tr√¨nh ƒë·∫ßu t∆∞ l·ª´a ƒë·∫£o v·ªõi l·ª£i nhu·∫≠n h·∫•p d·∫´n kh√¥ng th·ª±c t·∫ø.',
        reportedTargetId: 'POST_456789123'
      },

      // 5. Comment Report - Sexual Harassment
      {
        reportId: '1005',
        reportType: 'comment',
        reporterName: 'Ho√†ng VƒÉn Em',
        reporterEmail: 'em.hoang@example.com',
        reason: 'Qu·∫•y r·ªëi t√¨nh d·ª•c',
        detailedReason: 'B√¨nh lu·∫≠n n√†y ch·ª©a n·ªôi dung qu·∫•y r·ªëi t√¨nh d·ª•c v√† kh√¥ng ph√π h·ª£p.',
        reportedTargetId: 'COMMENT_789012345'
      },

      // 6. Course Report - Inappropriate Content
      {
        reportId: '1006',
        reportType: 'course',
        reporterName: 'V√µ Th·ªã Giang',
        reporterEmail: 'giang.vo@education.vn',
        reason: 'N·ªôi dung kh√¥ng ph√π h·ª£p',
        detailedReason: 'Kh√≥a h·ªçc n√†y ch·ª©a n·ªôi dung b·∫°o l·ª±c v√† kh√¥ng ph√π h·ª£p v·ªõi ƒë·ªô tu·ªïi ƒë∆∞·ª£c qu·∫£ng c√°o.',
        reportedTargetId: 'COURSE_111222333'
      },

      // 7. Project Report - Fraud
      {
        reportId: '1007',
        reportType: 'project',
        reporterName: 'ƒêinh VƒÉn H·∫£i',
        reporterEmail: 'hai.dinh@consumer.vn',
        reason: 'D·ª± √°n l·ª´a ƒë·∫£o',
        detailedReason: 'D·ª± √°n n√†y tuy√™n b·ªë sai s·ª± th·∫≠t v·ªÅ ti·∫øn ƒë·ªô v√† k·∫øt qu·∫£ ƒë·ªÉ l·ª´a ƒë·∫£o nh√† ƒë·∫ßu t∆∞.',
        reportedTargetId: 'PROJECT_444555666'
      },

      // 8. Recruitment Report - Discriminatory
      {
        reportId: '1008',
        reportType: 'recruitment',
        reporterName: 'B√πi Th·ªã Lan',
        reporterEmail: 'lan.bui@social.vn',
        reason: 'Ph√¢n bi·ªát ƒë·ªëi x·ª≠',
        detailedReason: 'Tin tuy·ªÉn d·ª•ng n√†y c√≥ y√™u c·∫ßu ph√¢n bi·ªát ƒë·ªëi x·ª≠ v·ªÅ gi·ªõi t√≠nh v√† ƒë·ªô tu·ªïi tr√°i ph√°p lu·∫≠t.',
        reportedTargetId: 'JOB_777888999'
      },

      // 9. Song Report - Copyright Violation
      {
        reportId: '1009',
        reportType: 'song',
        reporterName: 'L√Ω VƒÉn Minh',
        reporterEmail: 'minh.ly@music.vn',
        reason: 'Vi ph·∫°m b·∫£n quy·ªÅn √¢m nh·∫°c',
        detailedReason: 'B√†i h√°t n√†y s·ª≠ d·ª•ng beat v√† melody c·ªßa t√°c ph·∫©m c√≥ b·∫£n quy·ªÅn m√† kh√¥ng c√≥ gi·∫•y ph√©p.',
        reportedTargetId: 'SONG_123321123'
      },

      // 10. Event Report - Misleading Information
      {
        reportId: '1010',
        reportType: 'event',
        reporterName: 'Ng√¥ Th·ªã Oanh',
        reporterEmail: 'oanh.ngo@protection.vn',
        reason: 'Th√¥ng tin sai l·ªách',
        detailedReason: 'S·ª± ki·ªán n√†y cung c·∫•p th√¥ng tin sai l·ªách v·ªÅ ƒë·ªãa ƒëi·ªÉm, th·ªùi gian v√† n·ªôi dung ch∆∞∆°ng tr√¨nh.',
        reportedTargetId: 'EVENT_654987321'
      }
    ];

    console.log(`üìù Processing ${testMessages.length} comprehensive report messages...\n`);

    for (let i = 0; i < testMessages.length; i++) {
      const message = testMessages[i];
      console.log(`--- Processing report ${i + 1}/${testMessages.length}: ${message.reportType.toUpperCase()} ---`);

      try {
        await processReportMessage(message);
        console.log(`‚úÖ Report ${i + 1} processed successfully\n`);

        // Wait 500ms between messages for better round-robin distribution
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (error) {
        console.error(`‚ö†Ô∏è Failed to process report ${i + 1}:`, error);
      }
    }

    // Show final statistics
    console.log('üìä Final Report Statistics:');
    const totalReports = await db.select().from(reportManagement);
    console.log(`Total reports created: ${totalReports.length}`);

    // Group by report type
    const reportsByType: Record<string, number> = {};
    totalReports.forEach(report => {
      reportsByType[report.reportType] = (reportsByType[report.reportType] || 0) + 1;
    });

    console.log('\nüìà Reports by type:');
    Object.entries(reportsByType).forEach(([type, count]) => {
      console.log(`   ${type}: ${count} reports`);
    });

    // Group by assigned user
    const reportsByUser: Record<string, number> = {};
    totalReports.forEach(report => {
      if (report.assignedToName) {
        reportsByUser[report.assignedToName] = (reportsByUser[report.assignedToName] || 0) + 1;
      }
    });

    console.log('\nüë• Reports by assigned user:');
    Object.entries(reportsByUser).forEach(([user, count]) => {
      console.log(`   ${user}: ${count} reports`);
    });

    console.log('\nüéâ Comprehensive Report Management simulation completed successfully!');

  } catch (error) {
    console.error('‚ùå Simulation failed:', error);
    process.exit(1);
  }
}

// Run simulation
simulate10ReportTypes()
  .then(() => {
    console.log('\n‚ú® Script completed successfully');
    process.exit(0);
  })
  .catch(err => {
    console.error('‚ùå Script failed:', err);
    process.exit(1);
  });