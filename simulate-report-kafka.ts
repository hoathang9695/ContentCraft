
import { db } from './server/db';
import { users } from './shared/schema';
import { eq, ne, and } from 'drizzle-orm';

interface ReportMessage {
  reportId: string;
  reportType: 'user' | 'page' | 'group' | 'content' | 'comment' | 'post';
  reporterName: string;
  reporterEmail: string;
  reason: string;
  detailedReason: string;
  reportedTargetId?: string;
  reportedTargetName?: string;
}

async function processReportMessage(message: ReportMessage) {
  console.log(`üîÑ Processing report message: ${JSON.stringify(message)}`);
  
  try {
    // Get active users for round-robin assignment
    const activeUsers = await db
      .select()
      .from(users)
      .where(and(eq(users.status, "active"), ne(users.role, "admin")));

    if (!activeUsers || activeUsers.length === 0) {
      throw new Error("No active non-admin users found for assignment");
    }

    console.log(`üë• Found ${activeUsers.length} active users for assignment`);

    // Simulate round-robin assignment (simple random for demo)
    const randomIndex = Math.floor(Math.random() * activeUsers.length);
    const assignedUser = activeUsers[randomIndex];

    console.log(`üë§ Assigned to user: ${assignedUser.name} (ID: ${assignedUser.id})`);

    // Here we would normally insert into report_management table
    // For now, just simulate the processing
    const reportData = {
      reportId: message.reportId,
      reportType: message.reportType,
      reporterName: message.reporterName,
      reporterEmail: message.reporterEmail,
      reason: message.reason,
      detailedReason: message.detailedReason,
      status: 'pending',
      assignedToId: assignedUser.id,
      assignedToName: assignedUser.name,
      assignedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date()
    };

    console.log(`‚úÖ Report processed successfully:`, reportData);
    return reportData;

  } catch (error) {
    console.error(`‚ùå Error processing report message: ${error}`);
    throw error;
  }
}

async function simulateReportKafkaMessages() {
  console.log('üöÄ Starting Report Management Kafka simulation...\n');
  
  try {
    // Test messages for different report types
    const testMessages: ReportMessage[] = [
      {
        reportId: 'RPT_' + Date.now() + '_001',
        reportType: 'user',
        reporterName: 'Nguy·ªÖn VƒÉn An',
        reporterEmail: 'an.nguyen@example.com',
        reason: 'Spam tin nh·∫Øn',
        detailedReason: 'Ng∆∞·ªùi d√πng n√†y li√™n t·ª•c g·ª≠i tin nh·∫Øn spam qu·∫£ng c√°o ƒë·∫øn nhi·ªÅu ng∆∞·ªùi d√πng kh√°c.',
        reportedTargetId: '114652263781752445',
        reportedTargetName: 'Ng∆∞·ªùi d√πng spam'
      },
      {
        reportId: 'RPT_' + Date.now() + '_002',
        reportType: 'page',
        reporterName: 'Tr·∫ßn Th·ªã B√¨nh',
        reporterEmail: 'binh.tran@example.com',
        reason: 'Vi ph·∫°m b·∫£n quy·ªÅn',
        detailedReason: 'Trang n√†y ƒëƒÉng t·∫£i nhi·ªÅu h√¨nh ·∫£nh c√≥ b·∫£n quy·ªÅn m√† kh√¥ng c√≥ s·ª± cho ph√©p.',
        reportedTargetId: 'PAGE_123456789',
        reportedTargetName: 'Trang vi ph·∫°m b·∫£n quy·ªÅn'
      },
      {
        reportId: 'RPT_' + Date.now() + '_003',
        reportType: 'group',
        reporterName: 'L√™ Minh C∆∞·ªùng',
        reporterEmail: 'cuong.le@example.com',
        reason: 'N·ªôi dung ƒë·ªôc h·∫°i',
        detailedReason: 'Nh√≥m n√†y chia s·∫ª c√°c n·ªôi dung c√≥ t√≠nh ch·∫•t b·∫°o l·ª±c v√† k√≠ch ƒë·ªông th√π ƒë·ªãch.',
        reportedTargetId: 'GROUP_987654321',
        reportedTargetName: 'Nh√≥m n·ªôi dung ƒë·ªôc h·∫°i'
      },
      {
        reportId: 'RPT_' + Date.now() + '_004',
        reportType: 'content',
        reporterName: 'Ph·∫°m Th·ªã Dung',
        reporterEmail: 'dung.pham@example.com',
        reason: 'L·ª´a ƒë·∫£o t√†i ch√≠nh',
        detailedReason: 'B√†i vi·∫øt n√†y qu·∫£ng c√°o c√°c g√≥i ƒë·∫ßu t∆∞ v·ªõi l·ª£i nhu·∫≠n cao b·∫•t th∆∞·ªùng, c√≥ d·∫•u hi·ªáu l·ª´a ƒë·∫£o.',
        reportedTargetId: 'POST_456123789',
        reportedTargetName: 'B√†i vi·∫øt l·ª´a ƒë·∫£o'
      },
      {
        reportId: 'RPT_' + Date.now() + '_005',
        reportType: 'comment',
        reporterName: 'Ho√†ng VƒÉn Em',
        reporterEmail: 'em.hoang@example.com',
        reason: 'Qu·∫•y r·ªëi t√¨nh d·ª•c',
        detailedReason: 'B√¨nh lu·∫≠n n√†y ch·ª©a n·ªôi dung qu·∫•y r·ªëi t√¨nh d·ª•c v√† kh√¥ng ph√π h·ª£p.',
        reportedTargetId: 'COMMENT_789012345',
        reportedTargetName: 'B√¨nh lu·∫≠n qu·∫•y r·ªëi'
      }
    ];

    console.log(`üìù Processing ${testMessages.length} report messages...\n`);

    for (let i = 0; i < testMessages.length; i++) {
      const message = testMessages[i];
      console.log(`--- Processing message ${i + 1}/${testMessages.length} ---`);
      
      try {
        await processReportMessage(message);
        console.log(`‚úÖ Message ${i + 1} processed successfully\n`);
        
        // Wait 1 second between messages
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        console.error(`‚ö†Ô∏è Failed to process message ${i + 1}:`, error);
      }
    }

    console.log('üéâ Completed Report Management Kafka simulation');
    
  } catch (error) {
    console.error('‚ùå Simulation failed:', error);
    process.exit(1);
  }
}

// Run simulation
simulateReportKafkaMessages()
  .then(() => {
    console.log('\n‚ú® Script completed successfully');
    process.exit(0);
  })
  .catch(err => {
    console.error('‚ùå Script failed:', err);
    process.exit(1);
  });
