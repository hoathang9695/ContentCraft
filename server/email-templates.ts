
export interface EmailTemplateData {
  [key: string]: any;
}

export interface EmailTemplate {
  subject: string;
  html: string;
}

export class EmailTemplateService {
  private static readonly COMPANY_NAME = "EMSO";
  private static readonly COMPANY_TAGLINE = "M·∫°ng x√£ h·ªôi v√¨ ng∆∞·ªùi Vi·ªát";

  // Load template from database by type
  static async getTemplateFromDatabase(type: string): Promise<EmailTemplate | null> {
    try {
      const { db } = await import('./db.js');
      const { emailTemplates } = await import('../shared/schema.js');
      const { eq, and, desc } = await import('drizzle-orm');
      
      console.log(`üîç Looking for template with type: ${type}`);
      
      const [template] = await db
        .select()
        .from(emailTemplates)
        .where(and(
          eq(emailTemplates.type, type),
          eq(emailTemplates.isActive, true)
        ))
        .orderBy(desc(emailTemplates.createdAt))
        .limit(1);
      
      console.log(`üìã Found template:`, template ? {
        id: template.id,
        name: template.name,
        type: template.type,
        isActive: template.isActive
      } : 'No template found');
      
      if (template) {
        const variables = JSON.parse(template.variables || '[]');
        console.log(`‚úÖ Returning database template: ${template.name}`);
        return {
          subject: template.subject,
          html: template.htmlContent
        };
      }
      
      console.log(`‚ùå No active template found for type: ${type}`);
      return null;
    } catch (error) {
      console.error('Error loading template from database:', error);
      return null;
    }
  }

  // Render template with variables
  static renderTemplate(template: string, variables: Record<string, any>): string {
    let rendered = template;
    for (const [key, value] of Object.entries(variables)) {
      const placeholder = `{{${key}}}`;
      rendered = rendered.replace(new RegExp(placeholder, 'g'), String(value || ''));
    }
    return rendered;
  }
  
  private static readonly FOOTER_LINKS = [
    { text: "V·ªÅ ch√∫ng t√¥i", url: "https://emso.vn/about_us/mission" },
    { text: "Ti√™u chu·∫©n c·ªông ƒë·ªìng", url: "https://policies.emso.vn/community-standards" },
    { text: "Ch√≠nh s√°ch ki·∫øm ti·ªÅn", url: "https://policies.emso.vn/money-making-policy" },
    { text: "Ch√≠nh s√°ch n·ªôi dung", url: "https://policies.emso.vn/ipr" },
    { text: "Ch√≠nh s√°ch qu·∫£ng c√°o", url: "https://policies.emso.vn/advertising-marketing" }
  ];

  private static generateFooter(): string {
    const links = this.FOOTER_LINKS
      .map(link => `<a href="${link.url}" style="color: #3B82F6; text-decoration: none; margin-right: 10px;">${link.text}</a>`)
      .join('');

    return `
      <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 12px; color: #888;">
        <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ ${this.COMPANY_NAME} - ${this.COMPANY_TAGLINE}.</p>
        <p>N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
        <p style="margin-top: 15px;">
          ${links}
        </p>
      </div>
    `;
  }

  private static generateBaseTemplate(title: string, content: string, greeting?: string): string {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
          <h2 style="color: #333; margin: 0 0 10px 0;">${title}</h2>
          ${greeting ? `<p style="margin: 0; color: #666;">${greeting}</p>` : ''}
        </div>

        <div style="background-color: #fff; padding: 20px; border: 1px solid #e9ecef; border-radius: 8px; margin-bottom: 20px;">
          ${content}
        </div>

        ${this.generateFooter()}
      </div>
    `;
  }

  static getFeedbackConfirmationTemplate(data: {
    fullName: string;
    subject: string;
    feedbackType?: string;
    requestId: number;
  }): EmailTemplate {
    const feedbackTypeMap = {
      'bug_report': 'B√°o l·ªói',
      'feature_request': 'Y√™u c·∫ßu t√≠nh nƒÉng',
      'complaint': 'Khi·∫øu n·∫°i',
      'suggestion': 'ƒê·ªÅ xu·∫•t',
      'other': 'Kh√°c'
    };

    const feedbackTypeText = data.feedbackType ? feedbackTypeMap[data.feedbackType] || 'Ch∆∞a ph√¢n lo·∫°i' : 'Ch∆∞a ph√¢n lo·∫°i';

    const content = `
      <div style="background-color: #e8f5e8; padding: 15px; border-radius: 6px; border-left: 4px solid #28a745; margin-bottom: 15px;">
        <p style="margin: 0; color: #155724; font-weight: 500;">
          C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒê√≥ng g√≥p √Ω ki·∫øn & B√°o l·ªói. Ch√∫ng t√¥i v√¥ c√πng tr√¢n tr·ªçng nh·ªØng ƒë√≥ng g√≥p qu√Ω b√°u c·ªßa b·∫°n. 
          Ch√∫ng t√¥i s·∫Ω s·ªõm ph·∫£n h·ªìi v·ªÅ ƒê√≥ng g√≥p c·ªßa b·∫°n qua email b·∫°n ƒë√£ ƒëƒÉng k√Ω nh√©.
        </p>
      </div>
      
      <div style="background-color: #f8f9fa; padding: 15px; border-radius: 6px;">
        <h4 style="color: #495057; margin: 0 0 10px 0;">Th√¥ng tin ƒë√≥ng g√≥p c·ªßa b·∫°n:</h4>
        <p style="margin: 5px 0; color: #6c757d;"><strong>Ch·ªß ƒë·ªÅ:</strong> ${data.subject}</p>
        <p style="margin: 5px 0; color: #6c757d;"><strong>Lo·∫°i ƒë√≥ng g√≥p:</strong> ${feedbackTypeText}</p>
        <p style="margin: 5px 0; color: #6c757d;"><strong>M√£ y√™u c·∫ßu:</strong> #${data.requestId}</p>
      </div>

      <div style="margin-top: 20px; padding: 15px; background-color: #e3f2fd; border-radius: 6px; border-left: 4px solid #2196f3;">
        <p style="margin: 0; color: #0d47a1; font-weight: 500;">
          H√£y c√πng ch√∫ng t√¥i chung tay x√¢y d·ª±ng ${this.COMPANY_TAGLINE}.
        </p>
        <p style="margin: 10px 0 0 0; color: #0d47a1; font-weight: 600;">
          Tr√¢n tr·ªçng c·∫£m ∆°n!
        </p>
      </div>
    `;

    return {
      subject: "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒê√≥ng g√≥p √Ω ki·∫øn & B√°o l·ªói - EMSO",
      html: this.generateBaseTemplate(
        "C·∫£m ∆°n b·∫°n ƒë√£ g·ª≠i ƒê√≥ng g√≥p √Ω ki·∫øn & B√°o l·ªói",
        content,
        `Xin ch√†o ${data.fullName},`
      )
    };
  }

  static getSupportConfirmationTemplate(data: {
    fullName: string;
    subject: string;
    requestId: number;
  }): EmailTemplate {
    const content = `
      <div style="background-color: #e8f4fd; padding: 15px; border-radius: 6px; border-left: 4px solid #2196f3; margin-bottom: 15px;">
        <p style="margin: 0; color: #0d47a1; font-weight: 500;">
          C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi ch√∫ng t√¥i. Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu h·ªó tr·ª£ c·ªßa b·∫°n v√† s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.
        </p>
      </div>
      
      <div style="background-color: #f8f9fa; padding: 15px; border-radius: 6px;">
        <h4 style="color: #495057; margin: 0 0 10px 0;">Th√¥ng tin y√™u c·∫ßu c·ªßa b·∫°n:</h4>
        <p style="margin: 5px 0; color: #6c757d;"><strong>Ch·ªß ƒë·ªÅ:</strong> ${data.subject}</p>
        <p style="margin: 5px 0; color: #6c757d;"><strong>M√£ y√™u c·∫ßu:</strong> #${data.requestId}</p>
      </div>

      <div style="margin-top: 20px; padding: 15px; background-color: #fff3cd; border-radius: 6px; border-left: 4px solid #ffc107;">
        <p style="margin: 0; color: #856404; font-weight: 500;">
          Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn tr·∫£i nghi·ªám t·ªët nh·∫•t cho ng∆∞·ªùi d√πng ${this.COMPANY_TAGLINE}.
        </p>
      </div>
    `;

    return {
      subject: "X√°c nh·∫≠n y√™u c·∫ßu h·ªó tr·ª£ - EMSO",
      html: this.generateBaseTemplate(
        "X√°c nh·∫≠n y√™u c·∫ßu h·ªó tr·ª£",
        content,
        `Xin ch√†o ${data.fullName},`
      )
    };
  }

  static getWelcomeTemplate(data: {
    fullName: string;
    email: string;
  }): EmailTemplate {
    const content = `
      <div style="background-color: #e8f5e8; padding: 15px; border-radius: 6px; border-left: 4px solid #28a745; margin-bottom: 15px;">
        <p style="margin: 0; color: #155724; font-weight: 500;">
          Ch√†o m·ª´ng b·∫°n gia nh·∫≠p c·ªông ƒë·ªìng ${this.COMPANY_NAME}! Ch√∫ng t√¥i r·∫•t vui m·ª´ng c√≥ b·∫°n c√πng tham gia x√¢y d·ª±ng ${this.COMPANY_TAGLINE}.
        </p>
      </div>
      
      <div style="background-color: #f8f9fa; padding: 15px; border-radius: 6px;">
        <h4 style="color: #495057; margin: 0 0 10px 0;">Th√¥ng tin t√†i kho·∫£n:</h4>
        <p style="margin: 5px 0; color: #6c757d;"><strong>Email:</strong> ${data.email}</p>
      </div>

      <div style="margin-top: 20px; padding: 15px; background-color: #e3f2fd; border-radius: 6px; border-left: 4px solid #2196f3;">
        <p style="margin: 0; color: #0d47a1; font-weight: 500;">
          H√£y kh√°m ph√° v√† t·∫≠n h∆∞·ªüng nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi tr√™n n·ªÅn t·∫£ng c·ªßa ch√∫ng t√¥i!
        </p>
      </div>
    `;

    return {
      subject: "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EMSO",
      html: this.generateBaseTemplate(
        "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi EMSO",
        content,
        `Xin ch√†o ${data.fullName},`
      )
    };
  }

  static getSystemNotificationTemplate(data: {
    userName: string;
    title: string;
    message: string;
    isImportant?: boolean;
  }): EmailTemplate {
    const alertStyle = data.isImportant 
      ? "background-color: #f8d7da; border-left: 4px solid #dc3545; color: #721c24;"
      : "background-color: #e8f4fd; border-left: 4px solid #2196f3; color: #0d47a1;";

    const content = `
      <div style="${alertStyle} padding: 15px; border-radius: 6px; margin-bottom: 15px;">
        <p style="margin: 0; font-weight: 500;">
          ${data.message}
        </p>
      </div>
    `;

    return {
      subject: `${data.title} - EMSO`,
      html: this.generateBaseTemplate(
        data.title,
        content,
        `Xin ch√†o ${data.userName},`
      )
    };
  }

  // Template cho email ph·∫£n h·ªìi t·ª´ admin
  static getAdminReplyTemplate(data: {
    userName: string | { id: string; name: string };
    adminMessage: string;
    originalRequest: {
      id: number;
      subject: string;
      content: string;
    };
    attachmentInfo?: string;
  }): EmailTemplate {
    // Extract actual name from userName (handle both string and object formats)
    const actualUserName = typeof data.userName === 'string' 
      ? data.userName 
      : data.userName?.name || 'N/A';
    const content = `
      <h3 style="color: #495057; margin: 0 0 15px 0;">N·ªôi dung ph·∫£n h·ªìi:</h3>
      <div style="background-color: #f8f9fa; padding: 15px; border-radius: 6px; border-left: 4px solid #007bff;">
        ${data.adminMessage}
      </div>
      ${data.attachmentInfo || ''}

      <div style="background-color: #f8f9fa; padding: 15px; border-radius: 8px; border: 1px solid #e9ecef; margin-top: 20px;">
        <h4 style="color: #6c757d; margin: 0 0 10px 0;">Y√™u c·∫ßu g·ªëc c·ªßa b·∫°n:</h4>
        <p style="margin: 0 0 5px 0; color: #495057;"><strong>Ch·ªß ƒë·ªÅ:</strong> ${data.originalRequest.subject}</p>
        <p style="margin: 0; color: #6c757d; font-size: 14px; padding: 10px; background-color: #fff; border-radius: 4px;">
          ${data.originalRequest.content.replace(/\n/g, '<br>')}
        </p>
      </div>
    `;

    return {
      subject: "Ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng h·ªó tr·ª£ - EMSO",
      html: this.generateBaseTemplate(
        "Ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng h·ªó tr·ª£",
        content,
        `Xin ch√†o ${actualUserName}, c·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá v·ªõi ch√∫ng t√¥i. D∆∞·ªõi ƒë√¢y l√† ph·∫£n h·ªìi cho y√™u c·∫ßu h·ªó tr·ª£ c·ªßa b·∫°n.`
      )
    };
  }
}
