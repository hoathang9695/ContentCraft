
import { db } from './server/db';
import { fakeUsers } from './shared/schema';

interface TokenValidationResult {
  id: number;
  name: string;
  token: string;
  email?: string;
  password?: string;
  status: string;
  isValidToken: boolean;
  tokenLength: number;
  hasSpecialChars: boolean;
  errorMessage?: string;
}

async function checkFakeUsersTokens() {
  try {
    console.log('üîç ƒêang ki·ªÉm tra token c·ªßa t·∫•t c·∫£ fake users...\n');

    // L·∫•y t·∫•t c·∫£ fake users
    const allFakeUsers = await db.select().from(fakeUsers);
    
    if (allFakeUsers.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y fake user n√†o trong h·ªá th·ªëng');
      return;
    }

    console.log(`üìä T√¨m th·∫•y ${allFakeUsers.length} fake users ƒë·ªÉ ki·ªÉm tra\n`);

    const results: TokenValidationResult[] = [];
    let validTokens = 0;
    let invalidTokens = 0;
    let duplicateTokens = 0;
    const tokenCounts = new Map<string, number>();

    // ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa m·ªói token
    allFakeUsers.forEach(user => {
      const count = tokenCounts.get(user.token) || 0;
      tokenCounts.set(user.token, count + 1);
    });

    // Ki·ªÉm tra t·ª´ng fake user
    for (const user of allFakeUsers) {
      const result: TokenValidationResult = {
        id: user.id,
        name: user.name,
        token: user.token,
        email: user.email || undefined,
        password: user.password || undefined,
        status: user.status,
        isValidToken: true,
        tokenLength: user.token.length,
        hasSpecialChars: /[^a-zA-Z0-9]/.test(user.token)
      };

      // Ki·ªÉm tra c√°c ti√™u ch√≠ validation
      const errors: string[] = [];

      // 1. Token kh√¥ng ƒë∆∞·ª£c r·ªóng
      if (!user.token || user.token.trim() === '') {
        errors.push('Token r·ªóng');
        result.isValidToken = false;
      }

      // 2. Token ph·∫£i c√≥ ƒë·ªô d√†i h·ª£p l√Ω (th∆∞·ªùng >= 10 characters)
      if (user.token.length < 10) {
        errors.push(`Token qu√° ng·∫Øn (${user.token.length} k√Ω t·ª±)`);
        result.isValidToken = false;
      }

      // 3. Token kh√¥ng n√™n c√≥ kho·∫£ng tr·∫Øng
      if (user.token.includes(' ')) {
        errors.push('Token ch·ª©a kho·∫£ng tr·∫Øng');
        result.isValidToken = false;
      }

      // 4. Ki·ªÉm tra token tr√πng l·∫∑p
      const tokenCount = tokenCounts.get(user.token) || 0;
      if (tokenCount > 1) {
        errors.push(`Token tr√πng l·∫∑p (xu·∫•t hi·ªán ${tokenCount} l·∫ßn)`);
        result.isValidToken = false;
        duplicateTokens++;
      }

      // 5. Token kh√¥ng n√™n ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát nguy hi·ªÉm
      if (/[<>'"&]/.test(user.token)) {
        errors.push('Token ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát nguy hi·ªÉm');
        result.isValidToken = false;
      }

      if (errors.length > 0) {
        result.errorMessage = errors.join(', ');
        invalidTokens++;
      } else {
        validTokens++;
      }

      results.push(result);
    }

    // B√°o c√°o t·ªïng quan
    console.log('üìà T·ªîNG QUAN KI·ªÇM TRA TOKEN:');
    console.log(`‚úÖ Token h·ª£p l·ªá: ${validTokens}`);
    console.log(`‚ùå Token kh√¥ng h·ª£p l·ªá: ${invalidTokens}`);
    console.log(`üîÑ Token tr√πng l·∫∑p: ${duplicateTokens > 0 ? duplicateTokens : 0}\n`);

    // Chi ti·∫øt fake users c√≥ v·∫•n ƒë·ªÅ
    const problematicUsers = results.filter(r => !r.isValidToken);
    if (problematicUsers.length > 0) {
      console.log('üö® CHI TI·∫æT FAKE USERS C√ì V·∫§N ƒê·ªÄ:');
      console.log('‚îÄ'.repeat(80));
      
      problematicUsers.forEach((user, index) => {
        console.log(`${index + 1}. User ID: ${user.id}`);
        console.log(`   T√™n: ${user.name}`);
        console.log(`   Token: "${user.token}"`);
        console.log(`   Email: ${user.email || 'Kh√¥ng c√≥'}`);
        console.log(`   Status: ${user.status}`);
        console.log(`   ƒê·ªô d√†i token: ${user.tokenLength}`);
        console.log(`   L·ªói: ${user.errorMessage}`);
        console.log('');
      });
    }

    // Th·ªëng k√™ chi ti·∫øt
    console.log('üìä TH·ªêNG K√ä CHI TI·∫æT:');
    console.log('‚îÄ'.repeat(50));
    
    const statusCounts = results.reduce((acc, user) => {
      acc[user.status] = (acc[user.status] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    console.log('Ph√¢n b·ªï theo status:');
    Object.entries(statusCounts).forEach(([status, count]) => {
      console.log(`  ${status}: ${count} users`);
    });

    const tokenLengthStats = {
      min: Math.min(...results.map(r => r.tokenLength)),
      max: Math.max(...results.map(r => r.tokenLength)),
      avg: Math.round(results.reduce((sum, r) => sum + r.tokenLength, 0) / results.length)
    };

    console.log('\nTh·ªëng k√™ ƒë·ªô d√†i token:');
    console.log(`  Ng·∫Øn nh·∫•t: ${tokenLengthStats.min} k√Ω t·ª±`);
    console.log(`  D√†i nh·∫•t: ${tokenLengthStats.max} k√Ω t·ª±`);
    console.log(`  Trung b√¨nh: ${tokenLengthStats.avg} k√Ω t·ª±`);

    const usersWithEmail = results.filter(r => r.email).length;
    const usersWithPassword = results.filter(r => r.password).length;
    
    console.log('\nTh√¥ng tin b·ªï sung:');
    console.log(`  C√≥ email: ${usersWithEmail}/${results.length} users`);
    console.log(`  C√≥ password: ${usersWithPassword}/${results.length} users`);

    // Ki·ªÉm tra token tr√πng l·∫∑p c·ª• th·ªÉ
    const duplicateTokensList = Array.from(tokenCounts.entries())
      .filter(([_, count]) => count > 1)
      .map(([token, count]) => ({ token, count }));

    if (duplicateTokensList.length > 0) {
      console.log('\nüîÑ TOKENS TR√ôNG L·∫∂P:');
      console.log('‚îÄ'.repeat(50));
      duplicateTokensList.forEach(({ token, count }) => {
        console.log(`Token: "${token}" - Xu·∫•t hi·ªán ${count} l·∫ßn`);
        const usersWithToken = results.filter(r => r.token === token);
        usersWithToken.forEach(user => {
          console.log(`  - User ${user.id}: ${user.name}`);
        });
        console.log('');
      });
    }

    // Khuy·∫øn ngh·ªã
    console.log('üí° KHUY·∫æN NGH·ªä:');
    console.log('‚îÄ'.repeat(40));
    
    if (invalidTokens > 0) {
      console.log('‚Ä¢ C·∫ßn s·ª≠a ho·∫∑c thay th·∫ø c√°c token kh√¥ng h·ª£p l·ªá');
    }
    
    if (duplicateTokens > 0) {
      console.log('‚Ä¢ C·∫ßn t·∫°o token m·ªõi cho c√°c user c√≥ token tr√πng l·∫∑p');
    }
    
    if (usersWithEmail < results.length * 0.5) {
      console.log('‚Ä¢ Khuy·∫øn ngh·ªã th√™m email cho nhi·ªÅu fake users h∆°n');
    }
    
    if (usersWithPassword < results.length * 0.5) {
      console.log('‚Ä¢ Khuy·∫øn ngh·ªã th√™m password cho nhi·ªÅu fake users h∆°n');
    }

    if (validTokens === results.length) {
      console.log('‚úÖ T·∫•t c·∫£ tokens ƒë·ªÅu h·ª£p l·ªá!');
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra fake users tokens:', error);
  } finally {
    process.exit(0);
  }
}

// Ch·∫°y script
checkFakeUsersTokens();
