
import { db } from "./server/db";
import { fakeUsers } from "./shared/schema";
import { sql, eq } from "drizzle-orm";

async function migrateGenderData() {
  try {
    console.log("üîÑ B·∫Øt ƒë·∫ßu migrate d·ªØ li·ªáu gender...");

    // B∆∞·ªõc 1: C·∫≠p nh·∫≠t constraint tr∆∞·ªõc
    console.log("\nüîß B∆∞·ªõc 1: C·∫≠p nh·∫≠t constraint cho ph√©p c√°c gi√° tr·ªã m·ªõi...");
    
    // Drop constraint c≈©
    await db.execute(sql`
      ALTER TABLE fake_users 
      DROP CONSTRAINT IF EXISTS check_gender_valid
    `);
    console.log("‚úÖ ƒê√£ x√≥a constraint c≈©");

    // Th√™m constraint m·ªõi
    await db.execute(sql`
      ALTER TABLE fake_users 
      ADD CONSTRAINT check_gender_valid 
      CHECK (gender IN ('male_adult', 'male_young', 'male_teen', 'female_adult', 'female_young', 'female_teen', 'other', 'male', 'female'))
    `);
    console.log("‚úÖ ƒê√£ th√™m constraint m·ªõi cho ph√©p c·∫£ gi√° tr·ªã c≈© v√† m·ªõi");

    // B∆∞·ªõc 2: Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i
    console.log("\nüîç B∆∞·ªõc 2: Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i...");
    const currentData = await db
      .select({
        id: fakeUsers.id,
        name: fakeUsers.name,
        gender: fakeUsers.gender
      })
      .from(fakeUsers)
      .where(sql`gender IN ('male', 'female', 'nam', 'n·ªØ', 'Nam', 'N·ªØ')`);

    console.log(`üìä T√¨m th·∫•y ${currentData.length} b·∫£n ghi c·∫ßn migrate`);

    if (currentData.length === 0) {
      console.log("‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu n√†o c·∫ßn migrate");
      return;
    }

    // Hi·ªÉn th·ªã m·ªôt v√†i v√≠ d·ª•
    console.log("\nüìã M·ªôt v√†i v√≠ d·ª• d·ªØ li·ªáu c·∫ßn migrate:");
    currentData.slice(0, 5).forEach(user => {
      console.log(`  - ID ${user.id}: ${user.name} (${user.gender})`);
    });

    // B∆∞·ªõc 3: Migrate d·ªØ li·ªáu t·ª´ng lo·∫°i
    console.log("\nüîÑ B∆∞·ªõc 3: Migrate d·ªØ li·ªáu...");
    let totalUpdated = 0;

    // 3.1. Migrate 'male', 'nam', 'Nam' -> 'male_adult'
    console.log("\nüîÑ Migrate Nam -> Nam trung ni√™n...");
    const maleResult = await db
      .update(fakeUsers)
      .set({ gender: "male_adult" })
      .where(sql`gender IN ('male', 'nam', 'Nam')`)
      .returning({ id: fakeUsers.id, name: fakeUsers.name });

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${maleResult.length} ng∆∞·ªùi d√πng Nam`);
    totalUpdated += maleResult.length;

    // 3.2. Migrate 'female', 'n·ªØ', 'N·ªØ' -> 'female_adult'
    console.log("\nüîÑ Migrate N·ªØ -> N·ªØ trung ni√™n...");
    const femaleResult = await db
      .update(fakeUsers)
      .set({ gender: "female_adult" })
      .where(sql`gender IN ('female', 'n·ªØ', 'N·ªØ')`)
      .returning({ id: fakeUsers.id, name: fakeUsers.name });

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${femaleResult.length} ng∆∞·ªùi d√πng N·ªØ`);
    totalUpdated += femaleResult.length;

    // B∆∞·ªõc 4: C·∫≠p nh·∫≠t constraint cu·ªëi c√πng (ch·ªâ cho ph√©p gi√° tr·ªã m·ªõi)
    console.log("\nüîß B∆∞·ªõc 4: C·∫≠p nh·∫≠t constraint cu·ªëi c√πng...");
    
    // Drop constraint t·∫°m th·ªùi
    await db.execute(sql`
      ALTER TABLE fake_users 
      DROP CONSTRAINT IF EXISTS check_gender_valid
    `);

    // Th√™m constraint cu·ªëi c√πng (ch·ªâ gi√° tr·ªã m·ªõi)
    await db.execute(sql`
      ALTER TABLE fake_users 
      ADD CONSTRAINT check_gender_valid 
      CHECK (gender IN ('male_adult', 'male_young', 'male_teen', 'female_adult', 'female_young', 'female_teen', 'other'))
    `);
    console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t constraint cu·ªëi c√πng - ch·ªâ cho ph√©p gi√° tr·ªã m·ªõi");

    // B∆∞·ªõc 5: Ki·ªÉm tra k·∫øt qu·∫£ sau khi migrate
    console.log("\nüìä B∆∞·ªõc 5: Ki·ªÉm tra k·∫øt qu·∫£ sau migrate:");
    const afterMigration = await db
      .select({
        gender: fakeUsers.gender,
        count: sql<number>`count(*)`
      })
      .from(fakeUsers)
      .groupBy(fakeUsers.gender)
      .orderBy(fakeUsers.gender);

    afterMigration.forEach(row => {
      console.log(`  - ${row.gender}: ${row.count} ng∆∞·ªùi d√πng`);
    });

    console.log(`\n‚úÖ Ho√†n th√†nh migrate! T·ªïng c·ªông ƒë√£ c·∫≠p nh·∫≠t ${totalUpdated} b·∫£n ghi`);

    // Ki·ªÉm tra xem c√≤n d·ªØ li·ªáu c≈© n√†o kh√¥ng
    const remainingOldData = await db
      .select({
        id: fakeUsers.id,
        name: fakeUsers.name,
        gender: fakeUsers.gender
      })
      .from(fakeUsers)
      .where(sql`gender IN ('male', 'female', 'nam', 'n·ªØ', 'Nam', 'N·ªØ')`);

    if (remainingOldData.length > 0) {
      console.log(`\n‚ö†Ô∏è C·∫£nh b√°o: V·∫´n c√≤n ${remainingOldData.length} b·∫£n ghi ch∆∞a ƒë∆∞·ª£c migrate:`);
      remainingOldData.forEach(user => {
        console.log(`  - ID ${user.id}: ${user.name} (${user.gender})`);
      });
    } else {
      console.log("\nüéâ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c migrate th√†nh c√¥ng!");
    }

  } catch (error) {
    console.error("‚ùå L·ªói khi migrate d·ªØ li·ªáu:", error);
    
    if (error instanceof Error) {
      console.error("Chi ti·∫øt l·ªói:", error.message);
      console.error("Stack trace:", error.stack);
    }
  }
}

// Ch·∫°y migration
migrateGenderData()
  .then(() => {
    console.log("\n‚ú® Migration script ho√†n th√†nh");
    process.exit(0);
  })
  .catch(err => {
    console.error("\nüí• Migration script th·∫•t b·∫°i:", err);
    process.exit(1);
  });
